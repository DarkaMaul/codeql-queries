<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">
<qhelp>
<overview>
<p>
This is a CodeQL query constructed to find "C-string like" buffers without a null-terminator,
passed to a function expecting a null-terminated string.
</p>

<p>
The correct way of creating a C-string (in C and C++) is:
</p>

<sample language="c">char buf[N+1] = "1234...N";</sample>

<p>
The C language allows to create a buffer without a null terminator at the end:
</p>

<sample language="c">char buf[N] = "123...N";</sample>

<p>
Passing such buffer to a function expecting a null-terminated string
may result in out-of-bound read or write.
</p>

<p>
C compilers report <code>initializer-string for char array is too long</code> warnings
for initializers that are strictly longer than the buffer's size. They do not warn about
strings with length equal to the buffer's size. Even despite the fact that both type of initializers
produce non-null-terminated strings. That is, the following arrays will be initialized with exactly the
same data:
</p>

<sample language="c">char buf1[3] = "abc";
char buf2[3] = "abcdef";</sample>  

<p>
Interestingly, C++ compilers report errors for both cases.
</p>
</overview>

<recommendation>
<p>
Increase buffer sizes to include a null-byte at the end.
Alternatively, do not specify buffer sizes explicitly, as these could be automatically computed be a compiler.
</p>
</recommendation>

<example>
<sample src="NoNullTerminator.c" />

<p>
In this example, one function creates a correct C-string (should not be reported) and
the other one creates a non-compliant string.
The non-null-terminated string will cause a buffer overread during later call to the
<code>printf</code> function.
</p>
</example>

<references>
<li>
    <a href="https://wiki.sei.cmu.edu/confluence/display/c/STR11-C.+Do+not+specify+the+bound+of+a+character+array+initialized+with+a+string+literal">SEI CERT C Coding Standard "STR11-C. Do not specify the bound of a character array initialized with a string literal"</a>
</li>
</references>

</qhelp>

